meta {
  name: Booklist API
  type: collection
  version: 1
  documentation: https://github.com/Thammasok/booklist
  description: |
    # Booklist API Documentation
    
    This is the API documentation for the Booklist application. It includes all the available endpoints for user authentication and management.
    
    ## Authentication
    - Most endpoints require a JWT token for authentication
    - Include the token in the `Authorization` header: `Bearer <token>`
    - Tokens expire after the time specified in `JWT_EXPIRES_IN`
}

# Environment Variables
vars {
  base_url: http://localhost:3100/api/v1
  token: ""
}

# Health Check
get {{base_url}}/health {
  name: Health Check
  description: Check if the service is running
}

# Authentication
## Register User
post {{base_url}}/users/register {
  name: Register User
  description: Register a new user account
  body: json {
    "username": "testuser",
    "email": "test@example.com",
    "password": "password123"
  }
  auth: none
}

## Login User
post {{base_url}}/users/login {
  name: Login User
  description: Authenticate user and get JWT token
  body: json {
    "email": "test@example.com",
    "password": "password123"
  }
  auth: none
}

## Verify Email
post {{base_url}}/users/verify-email {
  name: Verify Email
  description: Verify user's email with verification token
  body: json {
    "token": "verification-token-from-email"
  }
  auth: none
}

## Resend Verification Email
post {{base_url}}/users/resend-verification {
  name: Resend Verification Email
  description: Resend the verification email
  body: json {
    "email": "test@example.com"
  }
  auth: none
}

## Get Current User
get {{base_url}}/users/me {
  name: Get Current User
  description: Get the currently authenticated user's profile
  auth: bearer {{token}}
}

## Update User
put {{base_url}}/users/me {
  name: Update User
  description: Update the authenticated user's profile
  body: json {
    "username": "newname",
    "email": "newemail@example.com"
  }
  auth: bearer {{token}}
}

## Change Password
put {{base_url}}/users/change-password {
  name: Change Password
  description: Change the authenticated user's password
  body: json {
    "currentPassword": "oldpassword123",
    "newPassword": "newpassword123"
  }
  auth: bearer {{token}}
}

## Request Password Reset
post {{base_url}}/users/forgot-password {
  name: Request Password Reset
  description: Request a password reset email
  body: json {
    "email": "user@example.com"
  }
  auth: none
}

## Reset Password
post {{base_url}}/users/reset-password {
  name: Reset Password
  description: Reset password with token from email
  body: json {
    "token": "reset-token-from-email",
    "newPassword": "newpassword123"
  }
  auth: none
}

## Delete Account
delete {{base_url}}/users/delete-account {
  name: Delete Account (Soft Delete)
  description: Soft delete the authenticated user's account
  auth: bearer {{token}}
}

## Restore Account
post {{base_url}}/users/restore-account {
  name: Restore Account
  description: Restore a soft-deleted account
  body: json {
    "email": "user@example.com"
  }
  auth: none
}

# Admin Endpoints
## Get All Users (Admin)
get {{base_url}}/admin/users {
  name: Get All Users (Admin)
  description: Get a list of all users (Admin only)
  auth: bearer {{token}}
}

## Get User by ID (Admin)
get {{base_url}}/admin/users/:id {
  name: Get User by ID (Admin)
  description: Get user details by ID (Admin only)
  auth: bearer {{token}}
}

## Update User Role (Admin)
put {{base_url}}/admin/users/:id/role {
  name: Update User Role (Admin)
  description: Update a user's role (Admin only)
  body: json {
    "role": "admin"
  }
  auth: bearer {{token}}
}

## Delete User (Admin)
delete {{base_url}}/admin/users/:id {
  name: Delete User (Admin)
  description: Permanently delete a user (Admin only)
  auth: bearer {{token}}
}
